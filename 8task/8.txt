Task: Create a CI/CD pipeline to build and push a Docker image to ACR and deploy to ACI.

🔧 Step 1: Azure Setup
1.1 Create Azure Resources
Go to https://portal.azure.com:

✅ Create a Resource Group
Name: devops-demo-rg

Region: your preferred location

✅ Create ACR (Azure Container Registry)
Name: myacramish (must be unique)

SKU: Basic

Enable public access (default)

1.2 Create Azure DevOps Project
Go to https://dev.azure.com

Create a new project: DockerToACI

📁 Step 2: Repo Setup in Azure DevOps
Go to Repos → Files → New and create these files:

🔹 Dockerfile
FROM python:3.10-slim
WORKDIR /app
COPY app.py .
COPY requirements.txt .
RUN pip install -r requirements.txt
CMD ["python", "app.py"]

🔹 app.py
from flask import Flask
app = Flask(__name__)

@app.route('/')
def hello():
    return "Hello from ACI!"

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=80)

🔹 requirements.txt
flask

🔐 Step 3: Service Connection in Azure DevOps
🔹 Create Azure Resource Manager Service Connection
Go to Project Settings → Service connections

Click + New service connection

Choose Azure Resource Manager

Use automatic method (sign in)

Select your subscription and resource group

Name it: azure-rm-connection

✅ Check Grant access to all pipelines

⚙️ Step 4: CI/CD YAML Pipeline
Go to Pipelines → New Pipeline → Select YAML
Create a new file: azure-pipelines.yml

Paste the following:

📄 azure-pipelines.yml
trigger:
- main

variables:
  imageName: 'myapp'
  acrName: 'myacramish'
  aciName: 'aci-myapp'
  resourceGroup: 'devops-demo-rg'
  location: 'eastus'  # Change if needed

stages:
- stage: BuildAndPush
  displayName: 'Build & Push Docker Image to ACR'
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'azure-rm-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az acr login --name ${{ variables.acrName }}
          docker build -t ${{ variables.acrName }}.azurecr.io/${{ variables.imageName }}:$(Build.BuildId) .
          docker push ${{ variables.acrName }}.azurecr.io/${{ variables.imageName }}:$(Build.BuildId)

- stage: DeployToACI
  displayName: 'Deploy to Azure Container Instance'
  dependsOn: BuildAndPush
  jobs:
  - job: Deploy
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'azure-rm-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az container delete --name ${{ variables.aciName }} --resource-group ${{ variables.resourceGroup }} --yes || true
          az container create \
            --name ${{ variables.aciName }} \
            --resource-group ${{ variables.resourceGroup }} \
            --image ${{ variables.acrName }}.azurecr.io/${{ variables.imageName }}:$(Build.BuildId) \
            --dns-name-label aci-myapp-${{ Build.BuildId }} \
            --ports 80 \
            --location ${{ variables.location }} \
            --registry-login-server ${{ variables.acrName }}.azurecr.io \
            --restart-policy OnFailure

🚀 Step 5: Run the Pipeline
Go to Pipelines → Run pipeline

It will:

✅ Build Docker image

✅ Push to ACR

✅ Deploy container to ACI

🌐 Step 6: Access the App
After successful deployment:

Go to Azure Portal → Resource group → devops-demo-rg → Container Instances

Open the created container (e.g., aci-myapp)

Copy the FQDN (Fully Qualified Domain Name)

Open it in your browser:
http://aci-myapp-<buildId>.<region>.azurecontainer.io

✅ You should see: “Hello from ACI!”