Task: Create a CI/CD pipeline to build and push a Docker image to ACR and deploy to AKS.

🧱 STEP 1: Set Up Required Azure Resources
🛠️ 1.1 Create a Resource Group
Go to https://portal.azure.com

Search for Resource groups

Click + Create

Name it: devops-demo-rg

Choose region (e.g., East US) → Click Review + Create → Create

🛠️ 1.2 Create Azure Container Registry (ACR)
Search for Container Registries

Click + Create

Fill:

Resource group: devops-demo-rg

Registry name: e.g., myacr12345 (must be globally unique)

SKU: Basic

Click Review + Create → Create

🛠️ 1.3 Create Azure Kubernetes Service (AKS)
Search for Kubernetes Services

Click + Create

Fill:

Resource group: devops-demo-rg

Cluster name: devops-aks-cluster

Region: East US

Node size: Default is fine

In the Integrations tab → Enable ACR integration
Select your ACR (myacr12345)

Click Review + Create → Create

📁 STEP 2: Set Up Azure DevOps Project
🧰 2.1 Create a DevOps Project
Go to https://dev.azure.com

Click New Project

Name: DockerToAKS

Visibility: Private → Create

🧰 2.2 Create a New Repo with Starter Files
Go to Repos → Files

Click Initialize and choose Add a README

Now click New File and create these files one by one:

🔹 Dockerfile
FROM python:3.10-slim
WORKDIR /app
COPY app.py .
COPY requirements.txt .
RUN pip install -r requirements.txt
CMD ["python", "app.py"]

🔹 app.py
from flask import Flask
app = Flask(__name__)

@app.route("/")
def home():
    return "Hello from AKS!"

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=80)

🔹 requirements.txt
flask

🔹 manifests/deployment.yaml
Click New Folder → manifests → then create a new file deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
      - name: myapp
        image: myacr12345.azurecr.io/myapp:$(Build.BuildId)
        ports:
        - containerPort: 80
🔹 manifests/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: myapp-service
spec:
  type: LoadBalancer
  selector:
    app: myapp
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80

🔐 STEP 3: Create Service Connections in Azure DevOps
🔐 3.1 Create Azure Resource Manager Connection
Go to Project Settings → Service Connections

Click + New service connection

Choose Azure Resource Manager

Choose Automatic → Authorize

Select:

Subscription

Resource group: devops-demo-rg

Name it: azure-rm-connection

✅ Check Grant access to all pipelines → Save

🔧 STEP 4: Create CI/CD YAML Pipeline
🧾 4.1 Create azure-pipelines.yml
Go to Pipelines → New Pipeline

Select Azure Repos Git → choose your repo

Choose YAML

Name the file: azure-pipelines.yml

Paste the following:
trigger:
- main

variables:
  imageName: 'myapp'
  acrName: 'myacr12345'  # Replace with your actual ACR name
  aksNamespace: 'default'

stages:
- stage: BuildAndPush
  displayName: 'Build & Push to ACR'
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'azure-rm-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az acr login --name ${{ variables.acrName }}
          docker build -t ${{ variables.acrName }}.azurecr.io/${{ variables.imageName }}:$(Build.BuildId) .
          docker push ${{ variables.acrName }}.azurecr.io/${{ variables.imageName }}:$(Build.BuildId)

- stage: DeployToAKS
  displayName: 'Deploy to AKS'
  dependsOn: BuildAndPush
  jobs:
  - job: Deploy
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Kubernetes@1
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: 'azure-rm-connection'
        azureResourceGroup: 'devops-demo-rg'
        kubernetesCluster: 'devops-aks-cluster'
        namespace: '${{ variables.aksNamespace }}'
        command: apply
        useConfigurationFile: true
        configuration: |
          manifests/deployment.yaml
          manifests/service.yaml
      displayName: 'Deploy app to AKS'

🚀 STEP 5: Run the Pipeline
Commit all files and push to main branch

Go to Pipelines → Run pipeline

Pipeline will:

✅ Build Docker image

✅ Push to ACR

✅ Deploy to AKS

🌐 STEP 6: Access the App
Go to Azure Portal → AKS → Services → Find myapp-service

Copy the external IP

Open in browser:
http://<external-ip>

You should see:
✅ "Hello from AKS!"


